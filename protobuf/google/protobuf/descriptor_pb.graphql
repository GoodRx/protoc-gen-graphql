# DO NOT EDIT! Generated by protoc-gen-graphql.

"""
The protocol compiler can output a FileDescriptorSet containing the .proto
files it parses.
"""
type GoogleProtobuf_FileDescriptorSet {
  file: [GoogleProtobuf_FileDescriptorProto!]!
}

"""
The protocol compiler can output a FileDescriptorSet containing the .proto
files it parses.
"""
input GoogleProtobuf_FileDescriptorSetInput {
  file: [GoogleProtobuf_FileDescriptorProtoInput!]
}

"""
Describes a complete .proto file.
"""
type GoogleProtobuf_FileDescriptorProto {
  """
  file name, relative to root of source tree
  """
  name: String
  """
  e.g. "foo", "foo.bar", etc.
  """
  package: String
  """
  Names of files imported by this file.
  """
  dependency: [String!]!
  """
  Indexes of the public imported files in the dependency list above.
  """
  publicDependency: [Float!]!
  """
  Indexes of the weak imported files in the dependency list.
  For Google-internal migration only. Do not use.
  """
  weakDependency: [Float!]!
  """
  All top-level definitions in this file.
  """
  messageType: [GoogleProtobuf_DescriptorProto!]!
  enumType: [GoogleProtobuf_EnumDescriptorProto!]!
  service: [GoogleProtobuf_ServiceDescriptorProto!]!
  extension: [GoogleProtobuf_FieldDescriptorProto!]!
  options: GoogleProtobuf_FileOptions
  """
  This field contains optional information about the original source code.
  You may safely remove this entire field without harming runtime
  functionality of the descriptors -- the information is needed only by
  development tools.
  """
  sourceCodeInfo: GoogleProtobuf_SourceCodeInfo
  """
  The syntax of the proto file.
  The supported values are "proto2" and "proto3".
  """
  syntax: String
}

"""
Describes a complete .proto file.
"""
input GoogleProtobuf_FileDescriptorProtoInput {
  """
  file name, relative to root of source tree
  """
  name: String
  """
  e.g. "foo", "foo.bar", etc.
  """
  package: String
  """
  Names of files imported by this file.
  """
  dependency: [String!]
  """
  Indexes of the public imported files in the dependency list above.
  """
  publicDependency: [Float!]
  """
  Indexes of the weak imported files in the dependency list.
  For Google-internal migration only. Do not use.
  """
  weakDependency: [Float!]
  """
  All top-level definitions in this file.
  """
  messageType: [GoogleProtobuf_DescriptorProtoInput!]
  enumType: [GoogleProtobuf_EnumDescriptorProtoInput!]
  service: [GoogleProtobuf_ServiceDescriptorProtoInput!]
  extension: [GoogleProtobuf_FieldDescriptorProtoInput!]
  options: GoogleProtobuf_FileOptionsInput
  """
  This field contains optional information about the original source code.
  You may safely remove this entire field without harming runtime
  functionality of the descriptors -- the information is needed only by
  development tools.
  """
  sourceCodeInfo: GoogleProtobuf_SourceCodeInfoInput
  """
  The syntax of the proto file.
  The supported values are "proto2" and "proto3".
  """
  syntax: String
}

"""
Describes a message type.
"""
type GoogleProtobuf_DescriptorProto {
  name: String
  field: [GoogleProtobuf_FieldDescriptorProto!]!
  extension: [GoogleProtobuf_FieldDescriptorProto!]!
  nestedType: [GoogleProtobuf_DescriptorProto!]!
  enumType: [GoogleProtobuf_EnumDescriptorProto!]!
  extensionRange: [GoogleProtobuf_DescriptorProto_ExtensionRange!]!
  oneofDecl: [GoogleProtobuf_OneofDescriptorProto!]!
  options: GoogleProtobuf_MessageOptions
  reservedRange: [GoogleProtobuf_DescriptorProto_ReservedRange!]!
  """
  Reserved field names, which may not be used by fields in the same message.
  A given name may only be reserved once.
  """
  reservedName: [String!]!
}

"""
Describes a message type.
"""
input GoogleProtobuf_DescriptorProtoInput {
  name: String
  field: [GoogleProtobuf_FieldDescriptorProtoInput!]
  extension: [GoogleProtobuf_FieldDescriptorProtoInput!]
  nestedType: [GoogleProtobuf_DescriptorProtoInput!]
  enumType: [GoogleProtobuf_EnumDescriptorProtoInput!]
  extensionRange: [GoogleProtobuf_DescriptorProto_ExtensionRangeInput!]
  oneofDecl: [GoogleProtobuf_OneofDescriptorProtoInput!]
  options: GoogleProtobuf_MessageOptionsInput
  reservedRange: [GoogleProtobuf_DescriptorProto_ReservedRangeInput!]
  """
  Reserved field names, which may not be used by fields in the same message.
  A given name may only be reserved once.
  """
  reservedName: [String!]
}

type GoogleProtobuf_DescriptorProto_ExtensionRange {
  start: Float
  end: Float
  options: GoogleProtobuf_ExtensionRangeOptions
}

input GoogleProtobuf_DescriptorProto_ExtensionRangeInput {
  start: Float
  end: Float
  options: GoogleProtobuf_ExtensionRangeOptionsInput
}

type GoogleProtobuf_DescriptorProto_ReservedRange {
  start: Float
  end: Float
}

input GoogleProtobuf_DescriptorProto_ReservedRangeInput {
  start: Float
  end: Float
}

type GoogleProtobuf_ExtensionRangeOptions {
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_ExtensionRangeOptionsInput {
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

"""
Describes a field within a message.
"""
type GoogleProtobuf_FieldDescriptorProto {
  name: String
  number: Float
  label: GoogleProtobuf_FieldDescriptorProto_Label
  """
  If type_name is set, this need not be set.  If both this and type_name
  are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  """
  type: GoogleProtobuf_FieldDescriptorProto_Type
  """
  For message and enum types, this is the name of the type.  If the name
  starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  rules are used to find the type (i.e. first the nested types within this
  message are searched, then within the parent, on up to the root
  namespace).
  """
  typeName: String
  """
  For extensions, this is the name of the type being extended.  It is
  resolved in the same manner as type_name.
  """
  extendee: String
  """
  For numeric types, contains the original text representation of the value.
  For booleans, "true" or "false".
  For strings, contains the default text contents (not escaped in any way).
  For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
  TODO(kenton):  Base-64 encode?
  """
  defaultValue: String
  """
  If set, gives the index of a oneof in the containing type's oneof_decl
  list.  This field is a member of that oneof.
  """
  oneofIndex: Float
  """
  JSON name of this field. The value is set by protocol compiler. If the
  user has set a "json_name" option on this field, that option's value
  will be used. Otherwise, it's deduced from the field's name by converting
  it to camelCase.
  """
  jsonName: String
  options: GoogleProtobuf_FieldOptions
}

"""
Describes a field within a message.
"""
input GoogleProtobuf_FieldDescriptorProtoInput {
  name: String
  number: Float
  label: GoogleProtobuf_FieldDescriptorProto_Label
  """
  If type_name is set, this need not be set.  If both this and type_name
  are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  """
  type: GoogleProtobuf_FieldDescriptorProto_Type
  """
  For message and enum types, this is the name of the type.  If the name
  starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  rules are used to find the type (i.e. first the nested types within this
  message are searched, then within the parent, on up to the root
  namespace).
  """
  typeName: String
  """
  For extensions, this is the name of the type being extended.  It is
  resolved in the same manner as type_name.
  """
  extendee: String
  """
  For numeric types, contains the original text representation of the value.
  For booleans, "true" or "false".
  For strings, contains the default text contents (not escaped in any way).
  For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
  TODO(kenton):  Base-64 encode?
  """
  defaultValue: String
  """
  If set, gives the index of a oneof in the containing type's oneof_decl
  list.  This field is a member of that oneof.
  """
  oneofIndex: Float
  """
  JSON name of this field. The value is set by protocol compiler. If the
  user has set a "json_name" option on this field, that option's value
  will be used. Otherwise, it's deduced from the field's name by converting
  it to camelCase.
  """
  jsonName: String
  options: GoogleProtobuf_FieldOptionsInput
}

"""
Describes a oneof.
"""
type GoogleProtobuf_OneofDescriptorProto {
  name: String
  options: GoogleProtobuf_OneofOptions
}

"""
Describes a oneof.
"""
input GoogleProtobuf_OneofDescriptorProtoInput {
  name: String
  options: GoogleProtobuf_OneofOptionsInput
}

"""
Describes an enum type.
"""
type GoogleProtobuf_EnumDescriptorProto {
  name: String
  value: [GoogleProtobuf_EnumValueDescriptorProto!]!
  options: GoogleProtobuf_EnumOptions
  """
  Range of reserved numeric values. Reserved numeric values may not be used
  by enum values in the same enum declaration. Reserved ranges may not
  overlap.
  """
  reservedRange: [GoogleProtobuf_EnumDescriptorProto_EnumReservedRange!]!
  """
  Reserved enum value names, which may not be reused. A given name may only
  be reserved once.
  """
  reservedName: [String!]!
}

"""
Describes an enum type.
"""
input GoogleProtobuf_EnumDescriptorProtoInput {
  name: String
  value: [GoogleProtobuf_EnumValueDescriptorProtoInput!]
  options: GoogleProtobuf_EnumOptionsInput
  """
  Range of reserved numeric values. Reserved numeric values may not be used
  by enum values in the same enum declaration. Reserved ranges may not
  overlap.
  """
  reservedRange: [GoogleProtobuf_EnumDescriptorProto_EnumReservedRangeInput!]
  """
  Reserved enum value names, which may not be reused. A given name may only
  be reserved once.
  """
  reservedName: [String!]
}

type GoogleProtobuf_EnumDescriptorProto_EnumReservedRange {
  start: Float
  end: Float
}

input GoogleProtobuf_EnumDescriptorProto_EnumReservedRangeInput {
  start: Float
  end: Float
}

"""
Describes a value within an enum.
"""
type GoogleProtobuf_EnumValueDescriptorProto {
  name: String
  number: Float
  options: GoogleProtobuf_EnumValueOptions
}

"""
Describes a value within an enum.
"""
input GoogleProtobuf_EnumValueDescriptorProtoInput {
  name: String
  number: Float
  options: GoogleProtobuf_EnumValueOptionsInput
}

"""
Describes a service.
"""
type GoogleProtobuf_ServiceDescriptorProto {
  name: String
  method: [GoogleProtobuf_MethodDescriptorProto!]!
  options: GoogleProtobuf_ServiceOptions
}

"""
Describes a service.
"""
input GoogleProtobuf_ServiceDescriptorProtoInput {
  name: String
  method: [GoogleProtobuf_MethodDescriptorProtoInput!]
  options: GoogleProtobuf_ServiceOptionsInput
}

"""
Describes a method of a service.
"""
type GoogleProtobuf_MethodDescriptorProto {
  name: String
  """
  Input and output type names.  These are resolved in the same way as
  FieldDescriptorProto.type_name, but must refer to a message type.
  """
  inputType: String
  outputType: String
  options: GoogleProtobuf_MethodOptions
  """
  Identifies if client streams multiple client messages
  """
  clientStreaming: Boolean
  """
  Identifies if server streams multiple server messages
  """
  serverStreaming: Boolean
}

"""
Describes a method of a service.
"""
input GoogleProtobuf_MethodDescriptorProtoInput {
  name: String
  """
  Input and output type names.  These are resolved in the same way as
  FieldDescriptorProto.type_name, but must refer to a message type.
  """
  inputType: String
  outputType: String
  options: GoogleProtobuf_MethodOptionsInput
  """
  Identifies if client streams multiple client messages
  """
  clientStreaming: Boolean
  """
  Identifies if server streams multiple server messages
  """
  serverStreaming: Boolean
}

type GoogleProtobuf_FileOptions {
  """
  Sets the Java package where classes generated from this .proto will be
  placed.  By default, the proto package is used, but this is often
  inappropriate because proto packages do not normally start with backwards
  domain names.
  """
  javaPackage: String
  """
  If set, all the classes from the .proto file are wrapped in a single
  outer class with the given name.  This applies to both Proto1
  (equivalent to the old "--one_java_file" option) and Proto2 (where
  a .proto always translates to a single class, but you may want to
  explicitly choose the class name).
  """
  javaOuterClassname: String
  """
  If set true, then the Java code generator will generate a separate .java
  file for each top-level message, enum, and service defined in the .proto
  file.  Thus, these types will *not* be nested inside the outer class
  named by java_outer_classname.  However, the outer class will still be
  generated to contain the file's getDescriptor() method as well as any
  top-level extensions defined in the file.
  """
  javaMultipleFiles: Boolean
  """
  This option does nothing.
  """
  javaGenerateEqualsAndHash: Boolean
  """
  If set true, then the Java2 code generator will generate code that
  throws an exception whenever an attempt is made to assign a non-UTF-8
  byte sequence to a string field.
  Message reflection will do the same.
  However, an extension field still accepts non-UTF-8 byte sequences.
  This option has no effect on when used with the lite runtime.
  """
  javaStringCheckUtf8: Boolean
  optimizeFor: GoogleProtobuf_FileOptions_OptimizeMode
  """
  Sets the Go package where structs generated from this .proto will be
  placed. If omitted, the Go package will be derived from the following:
    - The basename of the package import path, if provided.
    - Otherwise, the package statement in the .proto file, if present.
    - Otherwise, the basename of the .proto file, without extension.
  """
  goPackage: String
  """
  Should generic services be generated in each language?  "Generic" services
  are not specific to any particular RPC system.  They are generated by the
  main code generators in each language (without additional plugins).
  Generic services were the only kind of service generation supported by
  early versions of google.protobuf.

  Generic services are now considered deprecated in favor of using plugins
  that generate code specific to your particular RPC system.  Therefore,
  these default to false.  Old code which depends on generic services should
  explicitly set them to true.
  """
  ccGenericServices: Boolean
  javaGenericServices: Boolean
  pyGenericServices: Boolean
  phpGenericServices: Boolean
  """
  Is this file deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for everything in the file, or it will be completely ignored; in the very
  least, this is a formalization for deprecating files.
  """
  deprecated: Boolean
  """
  Enables the use of arenas for the proto messages in this file. This applies
  only to generated classes for C++.
  """
  ccEnableArenas: Boolean
  """
  Sets the objective c class prefix which is prepended to all objective c
  generated classes from this .proto. There is no default.
  """
  objcClassPrefix: String
  """
  Namespace for generated classes; defaults to the package.
  """
  csharpNamespace: String
  """
  By default Swift generators will take the proto package and CamelCase it
  replacing '.' with underscore and use that to prefix the types/symbols
  defined. When this options is provided, they will use this value instead
  to prefix the types/symbols defined.
  """
  swiftPrefix: String
  """
  Sets the php class prefix which is prepended to all php generated classes
  from this .proto. Default is empty.
  """
  phpClassPrefix: String
  """
  Use this option to change the namespace of php generated classes. Default
  is empty. When this option is empty, the package name will be used for
  determining the namespace.
  """
  phpNamespace: String
  """
  Use this option to change the namespace of php generated metadata classes.
  Default is empty. When this option is empty, the proto file name will be used
  for determining the namespace.
  """
  phpMetadataNamespace: String
  """
  Use this option to change the package of ruby generated classes. Default
  is empty. When this option is not set, the package name will be used for
  determining the ruby package.
  """
  rubyPackage: String
  """
  The parser stores options it doesn't recognize here.
  See the documentation for the "Options" section above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_FileOptionsInput {
  """
  Sets the Java package where classes generated from this .proto will be
  placed.  By default, the proto package is used, but this is often
  inappropriate because proto packages do not normally start with backwards
  domain names.
  """
  javaPackage: String
  """
  If set, all the classes from the .proto file are wrapped in a single
  outer class with the given name.  This applies to both Proto1
  (equivalent to the old "--one_java_file" option) and Proto2 (where
  a .proto always translates to a single class, but you may want to
  explicitly choose the class name).
  """
  javaOuterClassname: String
  """
  If set true, then the Java code generator will generate a separate .java
  file for each top-level message, enum, and service defined in the .proto
  file.  Thus, these types will *not* be nested inside the outer class
  named by java_outer_classname.  However, the outer class will still be
  generated to contain the file's getDescriptor() method as well as any
  top-level extensions defined in the file.
  """
  javaMultipleFiles: Boolean
  """
  This option does nothing.
  """
  javaGenerateEqualsAndHash: Boolean
  """
  If set true, then the Java2 code generator will generate code that
  throws an exception whenever an attempt is made to assign a non-UTF-8
  byte sequence to a string field.
  Message reflection will do the same.
  However, an extension field still accepts non-UTF-8 byte sequences.
  This option has no effect on when used with the lite runtime.
  """
  javaStringCheckUtf8: Boolean
  optimizeFor: GoogleProtobuf_FileOptions_OptimizeMode
  """
  Sets the Go package where structs generated from this .proto will be
  placed. If omitted, the Go package will be derived from the following:
    - The basename of the package import path, if provided.
    - Otherwise, the package statement in the .proto file, if present.
    - Otherwise, the basename of the .proto file, without extension.
  """
  goPackage: String
  """
  Should generic services be generated in each language?  "Generic" services
  are not specific to any particular RPC system.  They are generated by the
  main code generators in each language (without additional plugins).
  Generic services were the only kind of service generation supported by
  early versions of google.protobuf.

  Generic services are now considered deprecated in favor of using plugins
  that generate code specific to your particular RPC system.  Therefore,
  these default to false.  Old code which depends on generic services should
  explicitly set them to true.
  """
  ccGenericServices: Boolean
  javaGenericServices: Boolean
  pyGenericServices: Boolean
  phpGenericServices: Boolean
  """
  Is this file deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for everything in the file, or it will be completely ignored; in the very
  least, this is a formalization for deprecating files.
  """
  deprecated: Boolean
  """
  Enables the use of arenas for the proto messages in this file. This applies
  only to generated classes for C++.
  """
  ccEnableArenas: Boolean
  """
  Sets the objective c class prefix which is prepended to all objective c
  generated classes from this .proto. There is no default.
  """
  objcClassPrefix: String
  """
  Namespace for generated classes; defaults to the package.
  """
  csharpNamespace: String
  """
  By default Swift generators will take the proto package and CamelCase it
  replacing '.' with underscore and use that to prefix the types/symbols
  defined. When this options is provided, they will use this value instead
  to prefix the types/symbols defined.
  """
  swiftPrefix: String
  """
  Sets the php class prefix which is prepended to all php generated classes
  from this .proto. Default is empty.
  """
  phpClassPrefix: String
  """
  Use this option to change the namespace of php generated classes. Default
  is empty. When this option is empty, the package name will be used for
  determining the namespace.
  """
  phpNamespace: String
  """
  Use this option to change the namespace of php generated metadata classes.
  Default is empty. When this option is empty, the proto file name will be used
  for determining the namespace.
  """
  phpMetadataNamespace: String
  """
  Use this option to change the package of ruby generated classes. Default
  is empty. When this option is not set, the package name will be used for
  determining the ruby package.
  """
  rubyPackage: String
  """
  The parser stores options it doesn't recognize here.
  See the documentation for the "Options" section above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_MessageOptions {
  """
  Set true to use the old proto1 MessageSet wire format for extensions.
  This is provided for backwards-compatibility with the MessageSet wire
  format.  You should not use this for any other reason:  It's less
  efficient, has fewer features, and is more complicated.

  The message must be defined exactly as follows:
    message Foo {
      option message_set_wire_format = true;
      extensions 4 to max;
    }
  Note that the message cannot have any defined fields; MessageSets only
  have extensions.

  All extensions of your type must be singular messages; e.g. they cannot
  be int32s, enums, or repeated messages.

  Because this is an option, the above two restrictions are not enforced by
  the protocol compiler.
  """
  messageSetWireFormat: Boolean
  """
  Disables the generation of the standard "descriptor()" accessor, which can
  conflict with a field of the same name.  This is meant to make migration
  from proto1 easier; new code should avoid fields named "descriptor".
  """
  noStandardDescriptorAccessor: Boolean
  """
  Is this message deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the message, or it will be completely ignored; in the very least,
  this is a formalization for deprecating messages.
  """
  deprecated: Boolean
  """
  Whether the message is an automatically generated map entry type for the
  maps field.

  For maps fields:
      map<KeyType, ValueType> map_field = 1;
  The parsed descriptor looks like:
      message MapFieldEntry {
          option map_entry = true;
          optional KeyType key = 1;
          optional ValueType value = 2;
      }
      repeated MapFieldEntry map_field = 1;

  Implementations may choose not to generate the map_entry=true message, but
  use a native map in the target language to hold the keys and values.
  The reflection APIs in such implementions still need to work as
  if the field is a repeated message field.

  NOTE: Do not set the option in .proto files. Always use the maps syntax
  instead. The option should only be implicitly set by the proto compiler
  parser.
  """
  mapEntry: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_MessageOptionsInput {
  """
  Set true to use the old proto1 MessageSet wire format for extensions.
  This is provided for backwards-compatibility with the MessageSet wire
  format.  You should not use this for any other reason:  It's less
  efficient, has fewer features, and is more complicated.

  The message must be defined exactly as follows:
    message Foo {
      option message_set_wire_format = true;
      extensions 4 to max;
    }
  Note that the message cannot have any defined fields; MessageSets only
  have extensions.

  All extensions of your type must be singular messages; e.g. they cannot
  be int32s, enums, or repeated messages.

  Because this is an option, the above two restrictions are not enforced by
  the protocol compiler.
  """
  messageSetWireFormat: Boolean
  """
  Disables the generation of the standard "descriptor()" accessor, which can
  conflict with a field of the same name.  This is meant to make migration
  from proto1 easier; new code should avoid fields named "descriptor".
  """
  noStandardDescriptorAccessor: Boolean
  """
  Is this message deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the message, or it will be completely ignored; in the very least,
  this is a formalization for deprecating messages.
  """
  deprecated: Boolean
  """
  Whether the message is an automatically generated map entry type for the
  maps field.

  For maps fields:
      map<KeyType, ValueType> map_field = 1;
  The parsed descriptor looks like:
      message MapFieldEntry {
          option map_entry = true;
          optional KeyType key = 1;
          optional ValueType value = 2;
      }
      repeated MapFieldEntry map_field = 1;

  Implementations may choose not to generate the map_entry=true message, but
  use a native map in the target language to hold the keys and values.
  The reflection APIs in such implementions still need to work as
  if the field is a repeated message field.

  NOTE: Do not set the option in .proto files. Always use the maps syntax
  instead. The option should only be implicitly set by the proto compiler
  parser.
  """
  mapEntry: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_FieldOptions {
  """
  The ctype option instructs the C++ code generator to use a different
  representation of the field than it normally would.  See the specific
  options below.  This option is not yet implemented in the open source
  release -- sorry, we'll try to include it in a future version!
  """
  ctype: GoogleProtobuf_FieldOptions_CType
  """
  The packed option can be enabled for repeated primitive fields to enable
  a more efficient representation on the wire. Rather than repeatedly
  writing the tag and type for each element, the entire array is encoded as
  a single length-delimited blob. In proto3, only explicit setting it to
  false will avoid using packed encoding.
  """
  packed: Boolean
  """
  The jstype option determines the JavaScript type used for values of the
  field.  The option is permitted only for 64 bit integral and fixed types
  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  is represented as JavaScript string, which avoids loss of precision that
  can happen when a large value is converted to a floating point JavaScript.
  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  use the JavaScript "number" type.  The behavior of the default option
  JS_NORMAL is implementation dependent.

  This option is an enum to permit additional types to be added, e.g.
  goog.math.Integer.
  """
  jstype: GoogleProtobuf_FieldOptions_JSType
  """
  Should this field be parsed lazily?  Lazy applies only to message-type
  fields.  It means that when the outer message is initially parsed, the
  inner message's contents will not be parsed but instead stored in encoded
  form.  The inner message will actually be parsed when it is first accessed.

  This is only a hint.  Implementations are free to choose whether to use
  eager or lazy parsing regardless of the value of this option.  However,
  setting this option true suggests that the protocol author believes that
  using lazy parsing on this field is worth the additional bookkeeping
  overhead typically needed to implement it.

  This option does not affect the public interface of any generated code;
  all method signatures remain the same.  Furthermore, thread-safety of the
  interface is not affected by this option; const methods remain safe to
  call from multiple threads concurrently, while non-const methods continue
  to require exclusive access.


  Note that implementations may choose not to check required fields within
  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  may return true even if the inner message has missing required fields.
  This is necessary because otherwise the inner message would have to be
  parsed in order to perform the check, defeating the purpose of lazy
  parsing.  An implementation which chooses not to check required fields
  must be consistent about it.  That is, for any particular sub-message, the
  implementation must either *always* check its required fields, or *never*
  check its required fields, regardless of whether or not the message has
  been parsed.
  """
  lazy: Boolean
  """
  Is this field deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for accessors, or it will be completely ignored; in the very least, this
  is a formalization for deprecating fields.
  """
  deprecated: Boolean
  """
  For Google-internal migration only. Do not use.
  """
  weak: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_FieldOptionsInput {
  """
  The ctype option instructs the C++ code generator to use a different
  representation of the field than it normally would.  See the specific
  options below.  This option is not yet implemented in the open source
  release -- sorry, we'll try to include it in a future version!
  """
  ctype: GoogleProtobuf_FieldOptions_CType
  """
  The packed option can be enabled for repeated primitive fields to enable
  a more efficient representation on the wire. Rather than repeatedly
  writing the tag and type for each element, the entire array is encoded as
  a single length-delimited blob. In proto3, only explicit setting it to
  false will avoid using packed encoding.
  """
  packed: Boolean
  """
  The jstype option determines the JavaScript type used for values of the
  field.  The option is permitted only for 64 bit integral and fixed types
  (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  is represented as JavaScript string, which avoids loss of precision that
  can happen when a large value is converted to a floating point JavaScript.
  Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  use the JavaScript "number" type.  The behavior of the default option
  JS_NORMAL is implementation dependent.

  This option is an enum to permit additional types to be added, e.g.
  goog.math.Integer.
  """
  jstype: GoogleProtobuf_FieldOptions_JSType
  """
  Should this field be parsed lazily?  Lazy applies only to message-type
  fields.  It means that when the outer message is initially parsed, the
  inner message's contents will not be parsed but instead stored in encoded
  form.  The inner message will actually be parsed when it is first accessed.

  This is only a hint.  Implementations are free to choose whether to use
  eager or lazy parsing regardless of the value of this option.  However,
  setting this option true suggests that the protocol author believes that
  using lazy parsing on this field is worth the additional bookkeeping
  overhead typically needed to implement it.

  This option does not affect the public interface of any generated code;
  all method signatures remain the same.  Furthermore, thread-safety of the
  interface is not affected by this option; const methods remain safe to
  call from multiple threads concurrently, while non-const methods continue
  to require exclusive access.


  Note that implementations may choose not to check required fields within
  a lazy sub-message.  That is, calling IsInitialized() on the outer message
  may return true even if the inner message has missing required fields.
  This is necessary because otherwise the inner message would have to be
  parsed in order to perform the check, defeating the purpose of lazy
  parsing.  An implementation which chooses not to check required fields
  must be consistent about it.  That is, for any particular sub-message, the
  implementation must either *always* check its required fields, or *never*
  check its required fields, regardless of whether or not the message has
  been parsed.
  """
  lazy: Boolean
  """
  Is this field deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for accessors, or it will be completely ignored; in the very least, this
  is a formalization for deprecating fields.
  """
  deprecated: Boolean
  """
  For Google-internal migration only. Do not use.
  """
  weak: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_OneofOptions {
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_OneofOptionsInput {
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_EnumOptions {
  """
  Set this option to true to allow mapping different tag names to the same
  value.
  """
  allowAlias: Boolean
  """
  Is this enum deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum, or it will be completely ignored; in the very least, this
  is a formalization for deprecating enums.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_EnumOptionsInput {
  """
  Set this option to true to allow mapping different tag names to the same
  value.
  """
  allowAlias: Boolean
  """
  Is this enum deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum, or it will be completely ignored; in the very least, this
  is a formalization for deprecating enums.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_EnumValueOptions {
  """
  Is this enum value deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum value, or it will be completely ignored; in the very least,
  this is a formalization for deprecating enum values.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_EnumValueOptionsInput {
  """
  Is this enum value deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the enum value, or it will be completely ignored; in the very least,
  this is a formalization for deprecating enum values.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_ServiceOptions {
  """
  Is this service deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the service, or it will be completely ignored; in the very least,
  this is a formalization for deprecating services.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_ServiceOptionsInput {
  """
  Is this service deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the service, or it will be completely ignored; in the very least,
  this is a formalization for deprecating services.
  """
  deprecated: Boolean
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

type GoogleProtobuf_MethodOptions {
  """
  Is this method deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the method, or it will be completely ignored; in the very least,
  this is a formalization for deprecating methods.
  """
  deprecated: Boolean
  idempotencyLevel: GoogleProtobuf_MethodOptions_IdempotencyLevel
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOption!]!
}

input GoogleProtobuf_MethodOptionsInput {
  """
  Is this method deprecated?
  Depending on the target platform, this can emit Deprecated annotations
  for the method, or it will be completely ignored; in the very least,
  this is a formalization for deprecating methods.
  """
  deprecated: Boolean
  idempotencyLevel: GoogleProtobuf_MethodOptions_IdempotencyLevel
  """
  The parser stores options it doesn't recognize here. See above.
  """
  uninterpretedOption: [GoogleProtobuf_UninterpretedOptionInput!]
}

"""
A message representing a option the parser does not recognize. This only
appears in options protos created by the compiler::Parser class.
DescriptorPool resolves these when building Descriptor objects. Therefore,
options protos in descriptor objects (e.g. returned by Descriptor::options(),
or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
in them.
"""
type GoogleProtobuf_UninterpretedOption {
  name: [GoogleProtobuf_UninterpretedOption_NamePart!]!
  """
  The value of the uninterpreted option, in whatever type the tokenizer
  identified it as during parsing. Exactly one of these should be set.
  """
  identifierValue: String
  positiveIntValue: Float
  negativeIntValue: Float
  doubleValue: Float
  stringValue: String
  aggregateValue: String
}

"""
A message representing a option the parser does not recognize. This only
appears in options protos created by the compiler::Parser class.
DescriptorPool resolves these when building Descriptor objects. Therefore,
options protos in descriptor objects (e.g. returned by Descriptor::options(),
or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
in them.
"""
input GoogleProtobuf_UninterpretedOptionInput {
  name: [GoogleProtobuf_UninterpretedOption_NamePartInput!]
  """
  The value of the uninterpreted option, in whatever type the tokenizer
  identified it as during parsing. Exactly one of these should be set.
  """
  identifierValue: String
  positiveIntValue: Float
  negativeIntValue: Float
  doubleValue: Float
  stringValue: String
  aggregateValue: String
}

type GoogleProtobuf_UninterpretedOption_NamePart {
  namePart: String!
  isExtension: Boolean!
}

input GoogleProtobuf_UninterpretedOption_NamePartInput {
  namePart: String
  isExtension: Boolean
}

"""
Encapsulates information about the original source file from which a
FileDescriptorProto was generated.
"""
type GoogleProtobuf_SourceCodeInfo {
  """
  A Location identifies a piece of source code in a .proto file which
  corresponds to a particular definition.  This information is intended
  to be useful to IDEs, code indexers, documentation generators, and similar
  tools.

  For example, say we have a file like:
    message Foo {
      optional string foo = 1;
    }
  Let's look at just the field definition:
    optional string foo = 1;
    ^       ^^     ^^  ^  ^^^
    a       bc     de  f  ghi
  We have the following locations:
    span   path               represents
    [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
    [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
    [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
    [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
    [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).

  Notes:
  - A location may refer to a repeated field itself (i.e. not to any
    particular index within it).  This is used whenever a set of elements are
    logically enclosed in a single code segment.  For example, an entire
    extend block (possibly containing multiple extension definitions) will
    have an outer location whose path refers to the "extensions" repeated
    field without an index.
  - Multiple locations may have the same path.  This happens when a single
    logical declaration is spread out across multiple places.  The most
    obvious example is the "extend" block again -- there may be multiple
    extend blocks in the same scope, each of which will have the same path.
  - A location's span is not always a subset of its parent's span.  For
    example, the "extendee" of an extension declaration appears at the
    beginning of the "extend" block and is shared by all extensions within
    the block.
  - Just because a location's span is a subset of some other location's span
    does not mean that it is a descendent.  For example, a "group" defines
    both a type and a field in a single declaration.  Thus, the locations
    corresponding to the type and field and their components will overlap.
  - Code which tries to interpret locations should probably be designed to
    ignore those that it doesn't understand, as more types of locations could
    be recorded in the future.
  """
  location: [GoogleProtobuf_SourceCodeInfo_Location!]!
}

"""
Encapsulates information about the original source file from which a
FileDescriptorProto was generated.
"""
input GoogleProtobuf_SourceCodeInfoInput {
  """
  A Location identifies a piece of source code in a .proto file which
  corresponds to a particular definition.  This information is intended
  to be useful to IDEs, code indexers, documentation generators, and similar
  tools.

  For example, say we have a file like:
    message Foo {
      optional string foo = 1;
    }
  Let's look at just the field definition:
    optional string foo = 1;
    ^       ^^     ^^  ^  ^^^
    a       bc     de  f  ghi
  We have the following locations:
    span   path               represents
    [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
    [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
    [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
    [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
    [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).

  Notes:
  - A location may refer to a repeated field itself (i.e. not to any
    particular index within it).  This is used whenever a set of elements are
    logically enclosed in a single code segment.  For example, an entire
    extend block (possibly containing multiple extension definitions) will
    have an outer location whose path refers to the "extensions" repeated
    field without an index.
  - Multiple locations may have the same path.  This happens when a single
    logical declaration is spread out across multiple places.  The most
    obvious example is the "extend" block again -- there may be multiple
    extend blocks in the same scope, each of which will have the same path.
  - A location's span is not always a subset of its parent's span.  For
    example, the "extendee" of an extension declaration appears at the
    beginning of the "extend" block and is shared by all extensions within
    the block.
  - Just because a location's span is a subset of some other location's span
    does not mean that it is a descendent.  For example, a "group" defines
    both a type and a field in a single declaration.  Thus, the locations
    corresponding to the type and field and their components will overlap.
  - Code which tries to interpret locations should probably be designed to
    ignore those that it doesn't understand, as more types of locations could
    be recorded in the future.
  """
  location: [GoogleProtobuf_SourceCodeInfo_LocationInput!]
}

type GoogleProtobuf_SourceCodeInfo_Location {
  path: [Float!]!
  span: [Float!]!
  leadingComments: String
  trailingComments: String
  leadingDetachedComments: [String!]!
}

input GoogleProtobuf_SourceCodeInfo_LocationInput {
  path: [Float!]
  span: [Float!]
  leadingComments: String
  trailingComments: String
  leadingDetachedComments: [String!]
}

"""
Describes the relationship between generated code and its original source
file. A GeneratedCodeInfo message is associated with only one generated
source file, but may contain references to different source .proto files.
"""
type GoogleProtobuf_GeneratedCodeInfo {
  """
  An Annotation connects some span of text in generated code to an element
  of its generating .proto file.
  """
  annotation: [GoogleProtobuf_GeneratedCodeInfo_Annotation!]!
}

"""
Describes the relationship between generated code and its original source
file. A GeneratedCodeInfo message is associated with only one generated
source file, but may contain references to different source .proto files.
"""
input GoogleProtobuf_GeneratedCodeInfoInput {
  """
  An Annotation connects some span of text in generated code to an element
  of its generating .proto file.
  """
  annotation: [GoogleProtobuf_GeneratedCodeInfo_AnnotationInput!]
}

type GoogleProtobuf_GeneratedCodeInfo_Annotation {
  path: [Float!]!
  sourceFile: String
  begin: Float
  end: Float
}

input GoogleProtobuf_GeneratedCodeInfo_AnnotationInput {
  path: [Float!]
  sourceFile: String
  begin: Float
  end: Float
}

enum GoogleProtobuf_FieldDescriptorProto_Type {
  TYPE_DOUBLE
  TYPE_FLOAT
  TYPE_INT64
  TYPE_UINT64
  TYPE_INT32
  TYPE_FIXED64
  TYPE_FIXED32
  TYPE_BOOL
  TYPE_STRING
  TYPE_GROUP
  TYPE_MESSAGE
  TYPE_BYTES
  TYPE_UINT32
  TYPE_ENUM
  TYPE_SFIXED32
  TYPE_SFIXED64
  TYPE_SINT32
  TYPE_SINT64
}

enum GoogleProtobuf_FieldDescriptorProto_Label {
  LABEL_OPTIONAL
  LABEL_REQUIRED
  LABEL_REPEATED
}

enum GoogleProtobuf_FileOptions_OptimizeMode {
  SPEED
  CODE_SIZE
  LITE_RUNTIME
}

enum GoogleProtobuf_FieldOptions_CType {
  STRING
  CORD
  STRING_PIECE
}

enum GoogleProtobuf_FieldOptions_JSType {
  JS_NORMAL
  JS_STRING
  JS_NUMBER
}

enum GoogleProtobuf_MethodOptions_IdempotencyLevel {
  IDEMPOTENCY_UNKNOWN
  NO_SIDE_EFFECTS
  IDEMPOTENT
}
